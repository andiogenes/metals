/*! For license information please see 8b7e7f73.3437f94b.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9116],{4996:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=o(4848),r=o(8453);const i={author:"\xd3lafur P\xe1ll Geirsson",title:"Fast goto definition with low memory footprint",authorURL:"https://twitter.com/olafurpg",authorImageURL:"https://avatars2.githubusercontent.com/u/1408093?s=460&v=4"},a=void 0,s={permalink:"/metals/blog/2018/12/12/fast-goto-definition",source:"@site/blog/2018-12-12-fast-goto-definition.md",title:"Fast goto definition with low memory footprint",description:"Metals throws away its navigation index when it shuts down. Next time it starts,",date:"2018-12-12T00:00:00.000Z",tags:[],readingTime:8.42,hasTruncateMarker:!0,authors:[{name:"\xd3lafur P\xe1ll Geirsson",url:"https://twitter.com/olafurpg",imageURL:"https://avatars2.githubusercontent.com/u/1408093?s=460&v=4"}],frontMatter:{author:"\xd3lafur P\xe1ll Geirsson",title:"Fast goto definition with low memory footprint",authorURL:"https://twitter.com/olafurpg",authorImageURL:"https://avatars2.githubusercontent.com/u/1408093?s=460&v=4"},unlisted:!1,prevItem:{title:"Metals v0.3.2 - Iron",permalink:"/metals/blog/2018/12/14/iron"},nextItem:{title:"Metals v0.3 - Iron",permalink:"/metals/blog/2018/12/06/iron"}},l={authorsImageUrls:[void 0]},u=[];function c(t){const e={p:"p",...(0,r.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"Metals throws away its navigation index when it shuts down. Next time it starts,\nthe index is computed again from scratch. Although this approach is simple, it\nrequires indexing to be fast enough so you don't mind running it again and\nagain. Also, because we don't persist the index to disk, we need to be careful\nwith memory usage."}),"\n",(0,n.jsx)(e.p,{children:"This post covers how Metals achieves fast source indexing for Scala with a small\nmemory footprint. We describe the problem statement, explain the initial\nsolution and how an optimization delivered a 10x speedup. Finally, we evaluate\nthe result on a real-world project."})]})}function p(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}},1020:(t,e,o)=>{var n=o(6540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(t,e,o){var n,i={},u=null,c=null;for(n in void 0!==o&&(u=""+o),void 0!==e.key&&(u=""+e.key),void 0!==e.ref&&(c=e.ref),e)a.call(e,n)&&!l.hasOwnProperty(n)&&(i[n]=e[n]);if(t&&t.defaultProps)for(n in e=t.defaultProps)void 0===i[n]&&(i[n]=e[n]);return{$$typeof:r,type:t,key:u,ref:c,props:i,_owner:s.current}}e.Fragment=i,e.jsx=u,e.jsxs=u},4848:(t,e,o)=>{t.exports=o(1020)},8453:(t,e,o)=>{o.d(e,{R:()=>a,x:()=>s});var n=o(6540);const r={},i=n.createContext(r);function a(t){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);